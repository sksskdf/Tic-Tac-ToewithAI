type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Arrays;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class Main {
        final static Scanner sc = new Scanner(System.in);

        public static void main(String[] args) {
            // write your code here
            var makeCells = makeCells();
            showCells(makeCells);
            readCoordinates(makeCells);
        }

        private static void readCoordinates(String[][] makeCells) {
            boolean end = true;
            while (end) {
                System.out.print("Enter the coordinates: ");
                var input = sc.nextLine();
                if (validateCoordinate(input, makeCells)) {
                    end = false;
                }
            }
        }

        private static boolean validateCoordinate(String input, String[][] makeCells) {
            Matcher matcher = Pattern.compile("(\\d \\d)").matcher(input);
            var countO = 0;
            var countX = 0;
            if (!matcher.matches()) {
                System.out.println("You should enter numbers!");
                return false;
            } else if (matcher.matches()) {
                var x = Integer.parseInt(String.valueOf(input.charAt(0)));
                var y = Integer.parseInt(String.valueOf(input.charAt(2)));
                //out of length
                if (x > 3 || y > 3) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    return false;
                }

                if (!makeCells[x - 1][y - 1].equals("_")) {
                    System.out.println("This cell is occupied! Choose another one!");
                    return false;
                }

                String str = Arrays.deepToString(makeCells);

                for (int i = 0; i < str.length(); i++) {
                    if (String.valueOf(str.charAt(i)).equals("O")) {
                        countO++;
                    } else if (String.valueOf(str.charAt(i)).equals("X")) {
                        countX++;
                    }
                }


                if (countO > countX) {
                    makeCells[x - 1][y - 1] = "X";
                } else if (countO == countX) {
                    makeCells[x - 1][y - 1] = "X";
                } else if (countO < countX) {
                    makeCells[x - 1][y - 1] = "O";
                }

                checkWinOrLose(makeCells);
            }
            return true;
        }

        private static void checkWinOrLose(String[][] makeCells) {
            String[] arrayForCheck = new String[3];
            showCells(makeCells);

            //row
            if (checkRow(makeCells, arrayForCheck)) return;

            //column
            if (checkColumn(makeCells, arrayForCheck)) return;

            //Diagonal
            if (checkDiagonal(makeCells)) return;

            if (Arrays.deepToString(makeCells).contains("_")) {
                System.out.println("Game not finished");
            } else {
                System.out.println("Draw");
            }
        }

        private static boolean checkDiagonal(String[][] makeCells) {


            if (makeCells[0][0].equals(makeCells[1][1]) && makeCells[0][0].equals(makeCells[2][2])) {
                if (makeCells[0][0].equals("_")) {
                    return false;
                }
                System.out.printf("%s wins", makeCells[0][0]);
                return true;
            } else if (makeCells[0][2].equals(makeCells[1][1]) && makeCells[0][2].equals(makeCells[2][0])) {
                if (makeCells[0][2].equals("_")) {
                    return false;
                }
                System.out.printf("%s wins", makeCells[0][2]);
                return true;
            }
            return false;
        }

        private static boolean checkColumn(String[][] makeCells, String[] arrayForCheck) {
            for (int i = 0; i < makeCells.length; i++) {
                for (int j = 0; j < makeCells[i].length; j++) {
                    arrayForCheck[j] = makeCells[j][i];
                }

                if (arrayForCheck[i].equals("_")) {
                    return false;
                }

                if (arrayForCheck[0].equals(arrayForCheck[1]) && arrayForCheck[0].equals(arrayForCheck[2])) {
                    System.out.printf("%s wins", arrayForCheck[0]);
                    return true;
                }
            }
            return false;
        }

        private static boolean checkRow(String[][] makeCells, String[] arrayForCheck) {
            for (int i = 0; i < makeCells.length; i++) {
                System.arraycopy(makeCells[i], 0, arrayForCheck, 0, makeCells[i].length);

                if (arrayForCheck[i].equals("_")) {
                    return false;
                }

                if (arrayForCheck[0].equals(arrayForCheck[1]) && arrayForCheck[0].equals(arrayForCheck[2])) {
                    System.out.printf("%s wins", arrayForCheck[0]);
                    return true;
                }
            }
            return false;
        }

        private static String[][] makeCells() {
            System.out.print("Enter the cells: ");
            String str = sc.nextLine();

            String[][] cellsToMake = new String[3][3];
            int count = 0;
            for (int i = 0; i < cellsToMake.length; i++) {
                for (int j = 0; j < cellsToMake[i].length; j++) {
                    cellsToMake[i][j] = String.valueOf(str.charAt(count));
                    count++;
                }
            }

            return cellsToMake;
        }

        private static void showCells(String[][] enteredCells) {
            String[][] emptyCellTable = makeEmptyCellTable();

            String[][] fillEmptyCellTable = fillEmptyCellTable(emptyCellTable, enteredCells);

            printCells(fillEmptyCellTable);
        }

        private static String[][] fillEmptyCellTable(String[][] emptyCellTable, String[][] enteredCells) {
            for (int i = 0; i < emptyCellTable.length; i++) {
                int m = 0;

                for (int j = 0; j < emptyCellTable[i].length; j++) {
                    if ((i > 0 && i < 4) && (j > 0 && j < 8) && (j % 2 == 0)) {
                        if (enteredCells[i - 1][m].equals("_")) {
                            emptyCellTable[i][j] = " ";
                        } else {
                            emptyCellTable[i][j] = enteredCells[i - 1][m];
                        }
                        m++;
                    }
                }
            }

            return emptyCellTable;
        }

        private static void printCells(String[][] cellsToShow) {
            for (String[] strings : cellsToShow) {
                for (String string : strings) {
                    System.out.print(string);
                }
                System.out.println();
            }
        }

        private static String[][] makeEmptyCellTable() {
            String[][] cellsToShow = new String[5][9];
            for (int i = 0; i < cellsToShow.length; i++) {
                for (int j = 0; j < cellsToShow[i].length; j++) {
                    if (i == 0 || i == 4) {
                        cellsToShow[i][j] = "-";
                    } else {
                        cellsToShow[i][j] = " ";
                    }

                    if ((i > 0 && i < 4) && (j == 0 || j == 8)) {
                        cellsToShow[i][j] = "|";
                    }
                }
            }
            return cellsToShow;
        }
    }

  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7435#comment
status: Solved
record: 1
